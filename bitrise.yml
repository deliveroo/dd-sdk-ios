format_version: 11
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: other

# To customize how workflows are run on different triggers,
# go to Workflow Editor on Bitrise.io.

workflows:
  push_to_pull_request:
    steps:
    - script:
        inputs:
        - content: echo "NOP"

  push_to_develop_or_master:
    description: |-
        This workflow is triggered for each new commit pushed to `develop` or `master` branch.
    steps:
    - script:
        inputs:
        - content: echo "NOP"

  push_to_dogfooding:
    steps:
    - script:
        inputs:
        - content: echo "NOP"

  run_nightly_e2e_tests:
    after_run:
    - _make_dependencies
    - run_e2e_tests
    - _notify_failure_on_slack

  tagged_commit:
    steps:
    - script:
        inputs:
        - content: echo "NOP"

  _make_dependencies:
    description: |-
        Does `make dependencies` to prepare source code in repo for building and testing.
    steps:
    - script:
        title: Do `make dependencies`
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            make dependencies ci=${CI}

  _deploy_artifacts:
    description: |-
        Uploads artifacts to associate them with build log on Bitrise.io.
    steps:
    - deploy-to-bitrise-io: {}

  _notify_failure_on_slack:
    description: |-
        Notifies any (previous) workflow failure on Slack.
        Should be used to notify failures for workflows which do not report back to GitHub check.
    steps:
    - slack:
        is_always_run: true
        run_if: .IsBuildFailed
        inputs:
        - channel: '#dd-sdk-ios'
        - buttons: |-
            See Bitrise log|${BITRISE_BUILD_URL}
        - pretext: |-
            ⚠️ Bitrise build failed.
        - color_on_error: '#FF0000'
        - author_name: ''
        - message: ''
        - message_on_error: 'Failed to run "${BITRISE_TRIGGERED_WORKFLOW_ID}"'
        - icon_url: 'https://avatars.githubusercontent.com/t/3555052?s=128&v=4'
        - webhook_url: '${SLACK_INCOMING_WEBHOOK_MOBILE_CI}'

  run_e2e_tests:
    description: |-
        Runs E2E tests on iOS Simulator.
    steps:
    - xcode-test:
        title: Run E2E tests for manual instrumentation APIs - iOS Simulator
        inputs:
        - scheme: E2ETests
        - destination: platform=iOS Simulator,name=iPhone 11,OS=latest
        - project_path: Datadog.xcworkspace
        - xcpretty_test_options: --color --report html --output "${BITRISE_DEPLOY_DIR}/E2E-tests.html"
    - xcode-test:
        title: Run E2E tests for auto instrumentation APIs - iOS Simulator
        inputs:
        - scheme: E2EInstrumentationTests
        - destination: platform=iOS Simulator,name=iPhone 11,OS=latest
        - project_path: Datadog.xcworkspace
        - xcpretty_test_options: --color --report html --output "${BITRISE_DEPLOY_DIR}/E2E-instrumentation-tests.html"
